<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>EA1HET / 0x30.io</title>
    <link href="https://0x30.io/feed.xml" rel="self" />
    <link href="https://0x30.io" />
    <updated>2019-08-07T07:54:58+02:00</updated>
    <author>
        <name>Jonathan Gonzalez</name>
    </author>
    <id>https://0x30.io</id>

    <entry>
        <title>Application Security</title>
        <author>
            <name>Jonathan Gonzalez</name>
        </author>
        <link href="https://0x30.io/application-security/"/>
        <id>https://0x30.io/application-security/</id>

        <updated>2019-08-07T07:28:05+02:00</updated>
            <summary>
                <![CDATA[
                    A review on SAST, DAST, IAST and RASPIt’s estimated that 90 percent of security incidents result from attackers exploiting known software bugs. Needless to say, squashing those bugs in the development phase of software could reduce the information security risks facing many organizations today. To&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2 id="sast_dast_iast_and_rasp" class="sectionedit2">A review on SAST, DAST, IAST and RASP</h2>
<div class="level2">
<p>It’s estimated that 90 percent of security incidents result from attackers exploiting known software bugs. Needless to say, squashing those bugs in the development phase of software could reduce the information security risks facing many organizations today. To do that, a number of technologies are available to help developers catch security flaws before they’re baked into a final software release. They include SAST, DAST, IAST, and RASP.</p>
<h2 id="mcetoc_1dhl8k5f01"><strong>SAST vs DAST</strong></h2>
<p>SAST, or Static Application Security Testing, also known as “white box testing” has been around for more than a decade. It allows developers to find security vulnerabilities in the application source code earlier in the software development life cycle. It also ensures conformance to coding guidelines and standards without actually executing the underlying code.</p>
<p>DAST, or Dynamic Application Security Testing, also known as “black box” testing, can find security vulnerabilities and weaknesses in a running application, typically web apps. It does that by employing fault injection techniques on an app, such as feeding malicious data to the software, to identify common security vulnerabilities, such as SQL injection and cross-­site scripting. DAST can also cast a spotlight in runtime problems that can’t be identified by static analysis­­ for example, authentication and server configuration issues, as well as flaws visible only when a known user logs in.</p>
<h2 id="mcetoc_1dhl8khlv2"><strong>SAST &amp; DAST Are Usually Used in Tandem </strong></h2>
<p>SAST and DAST are often used in tandem because SAST isn’t going to find runtime errors and DAST isn’t going to flag coding errors, at least not down to the code line number. SAST performs well when it comes to finding an error in a line of code, such as weak random number generation, but usually not very efficient in finding data flow flaws. In addition, SAST solutions are notorious for the larger amount of false positive or false negatives. We created reshift, a free static security testing tool that uses our proprietary machine learning algorithm to triage false positives faster, check it out here if you are interested.</p>
<p><em class="u">Abstract Interpretation:</em> Some success in reducing or entirely eliminating false positives has been achieved with something called Abstract Interpretation. However, to get the best results, abstract interpretation algorithms need to be tailored to codes using an application’s domain, which includes its architecture, how it uses certain numerical algorithms and the types of data structures it manipulates.</p>
<p><img src="https://notes.0x30.io/lib/exe/fetch.php?w=600&amp;tok=66fd04&amp;media=cybersec:dastvssast.jpeg"></p>
<div class="level2">
<p>Despite SAST’s imperfections, it remains a favorite among development teams. They like that it allows them to scan a project at the code level, which makes it easier for individual team members to make the changes recommended by the technology. it also lets them find flaws early in the development process, which helps reduce the costs and ripple effects that result from addressing problems at the end of the process.</p>
<p>What’s more, SAST can be automated and transparently integrated into a project’s workflow. That removes some of the hassle typically associated with testing apps for security and contrasts sharply with DAST where, for large projects, a special infrastructure needs to be created, special tests performed and multiple instances of an application run in parallel with different input data.</p>
<p>DAST, though, understands arguments and function calls so it can determine if a call is behaving as it should be. SAST can’t check calls and in most cases, is unable to check argument values.</p>
</div>
<h2 id="interactive_application_security_testing_iast" class="sectionedit3">Interactive Application Security Testing (IAST)</h2>
<div class="level2">
<p>IAST or Interactive Application Security Testing. Because both SAST and DAST are older technologies, there are those who argue they lack what it takes to secure modern web and mobile apps. For example, SAST has a difficult time dealing with libraries and frameworks found in modern apps. That’s because static tools only see the application source code they can follow. What’s more, libraries and third­party components often cause static tools to choke, producing “lost sources” and “lost sinks” messages. The same is true for frameworks. Run a static tool on an <abbr title="Application Programming Interface">API</abbr>, web service or REST endpoint, and it won’t find anything wrong in them because it can’t understand the framework.</p>
<p>IAST is designed to address the shortcomings of SAST and DAST by combining elements of both approaches. IAST places an agent within an application and performs all its analysis in the app in real-time and anywhere in the development process ­­ IDE, continuous integrated environment, QA or even in production.</p>
<p>Because the IAST agent is working inside the app, it can apply its analysis to the entire app ­­ all its code; its runtime control and data flow information; its configuration information; HTTP requests and responses; libraries, frameworks and other components; and backend connection information. Access to all that information allows the IAST engine to cover more code, produce more accurate results and verify a broader range of security rules than either SAST or DAST.</p>
<figure class="post__video"><iframe width="560" height="314" src="https://www.youtube.com/embed/5rxkEz7mjIk" allowfullscreen="allowfullscreen" ></iframe></figure>
<p> </p>
<h2 id="run-time_application_security_protection_rasp" class="sectionedit4">Run-time Application Security Protection (RASP)</h2>
<div class="level2">
<p>RASP, or Run-time Application Security Protection As with IAST, RASP, or Run­time Application Security Protection, works inside the application, but it is less a testing tool and more a security tool. It’s plugged into an application or its run­time environment and can control application execution. That allows RASP to protect the app even if a network’s perimeter defenses are breached and the apps contain security vulnerabilities missed by the development team. RASP lets an app run continuous security checks on itself and respond to live attacks by terminating an attacker’s session and alerting defenders to the attack.</p>
<p>An issue particular to RASP is it can create a sense of false security within a development team. They may not adhere to security best practices thinking, “If we miss something, RASP will pick it up.”</p>
<p>The problem with technologies like IAST and RASP is they can have an adverse effect on application performance, although boosters of the tech any performance hits are minimal. An issue particular to RASP is it can create a sense of false security within a development team. They may not adhere to security best practices thinking, “If we miss something, RASP will pick it up.” But even if RASP finds a flaw, the development team still has to fix the problem and while they do, the application may have to be taken offline, costing an organization time, money and customer goodwill.</p>
<p>Regardless of the challenges found in technologies like SAST, DAST, IAST and RASP, using them can create software that’s more secure and do it in a way that’s faster and more cost ­effective than tacking all security testing to the tail of the development process.</p>
<figure class="post__video"><iframe width="560" height="314" src="https://www.youtube.com/embed/5_9mEK_4nPg" allowfullscreen="allowfullscreen" ></iframe></figure>
<p> </p>
<h2 id="software_suites" class="sectionedit5">Software suites</h2>
<h3 id="mcetoc_1dhl8nk3v3" class="sectionedit5">Static Application Security Testing</h3>
<div class="level3">
<ol>
<li class="level1 node">
<div class="li"><em class="u">Multilanguage</em></div>
<ol>
<li class="level2 node">
<div class="li">OWASP</div>
<ol>
<li class="level3">
<div class="li">SonarQube</div>
</li>
<li class="level3">
<div class="li">FindBugs (Java, Groovy, Scala)</div>
</li>
<li class="level3">
<div class="li">FindSecurityBugs (Java, Groovy, Scala)</div>
</li>
<li class="level3">
<div class="li">LAPSE+ (J2EE)</div>
</li>
</ol>
</li>
<li class="level2">
<div class="li">Veracode</div>
</li>
<li class="level2">
<div class="li">Sparrow</div>
</li>
<li class="level2">
<div class="li">Kiuwan</div>
</li>
<li class="level2">
<div class="li">DefenseCode Thunderscan</div>
</li>
<li class="level2">
<div class="li">MicroFocus Fortify</div>
</li>
</ol>
</li>
<li class="level1 node">
<div class="li"><em class="u">Language-specific</em>:</div>
<ol>
<li class="level2 node">
<div class="li">Python</div>
<ol>
<li class="level3">
<div class="li">Pylint</div>
</li>
</ol>
</li>
<li class="level2 node">
<div class="li">Java, JS and derivatives</div>
<ol>
<li class="level3">
<div class="li">JLint</div>
</li>
<li class="level3">
<div class="li">Reshift</div>
</li>
</ol>
</li>
<li class="level2 node">
<div class="li">PHP</div>
<ol>
<li class="level3">
<div class="li">Pixy</div>
</li>
<li class="level3">
<div class="li">PHP-Sat</div>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</div>
<h3 id="dynamic_application_security_testing" class="sectionedit7">Dynamic Application Security Testing</h3>
<div class="level3">
<ol>
<li class="level1 node">
<div class="li"><em class="u">Multilanguage</em>:</div>
<ol>
<li class="level2">
<div class="li">IBM Rational AppScan</div>
</li>
<li class="level2">
<div class="li">Sparrow</div>
</li>
</ol>
</li>
<li class="level1 node">
<div class="li"><em class="u">Language-specific</em>:</div>
<ol>
<li class="level2 node">
<div class="li">Javascript:</div>
<ol>
<li class="level3">
<div class="li">IROH.JS</div>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</div>
<h3 id="interactive_application_security_testing" class="sectionedit8">Interactive Application Security Testing</h3>
<div class="level3">
<ol>
<li class="level1">
<div class="li">OWASP</div>
</li>
<li class="level1">
<div class="li">Sparrow</div>
</li>
</ol>
</div>
<h3 id="run-time_application_security_protection" class="sectionedit9">Run-time Application Security Protection</h3>
<div class="level3">
<ol>
<li class="level1">
<div class="li">Contrast Security</div>
</li>
<li class="level1">
<div class="li">Sparrow</div>
</li>
</ol>
</div>
</div>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>CyberSecurity &#x27;Kill Chain&#x27;</title>
        <author>
            <name>Jonathan Gonzalez</name>
        </author>
        <link href="https://0x30.io/cybersecurity-kill-chain/"/>
        <id>https://0x30.io/cybersecurity-kill-chain/</id>

        <updated>2019-08-07T07:24:23+02:00</updated>
            <summary>
                <![CDATA[
                    What is the Cyber Kill Chain Model?‘Kill Chain’ is a term originally used by the military to define the steps an enemy uses to attack a target. In 2011, Lockheed Martin released a paper defining a Cyber Kill Chain. Similar in concept to the military’s model, it defines&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="mcetoc_1dhl89qlr0">What is the Cyber Kill Chain Model?</h3>
<p>‘Kill Chain’ is a term originally used by the military to define the steps an enemy uses to attack a target. In <a href="https://www.lockheedmartin.com/content/dam/lockheed/data/corporate/documents/LM-White-Paper-Intel-Driven-Defense.pdf" target="_blank" rel="noopener noreferrer">2011, Lockheed Martin released a paper</a> defining a Cyber Kill Chain. Similar in concept to the military’s model, it defines <strong>the steps used by cyber attackers in today’s cyber-based attacks</strong>. </p>
<p>The theory is that by understanding each of these stages, defenders can better identify and stop attackers at each of the respective stages. The more points at which you can intercept the bad guys, the better the chance you have to deny them from their objective or force them to make enough noise where you can more easily detect them. </p>
<p>The 'Kill Chain' model was developed by Lockheed Martin, named officially as the Cyber Kill Chain® framework, is part of the Intelligence Driven Defense® model for identification and prevention of cyber intrusions activity. The model identifies what the adversaries must complete in order to achieve their objective.</p>
<p>The seven steps of the Cyber Kill Chain® enhance visibility into an attack and enrich an analyst’s understanding of an adversary’s tactics, techniques and procedures.</p>
<p><code><strong>A: Advanced</strong></code><br><code><em>Targeted, Coordinated, Purposeful</em></code></p>
<p><code><strong>P: Persistent</strong></code><br><code><em>Month after Month, Year after Year</em></code></p>
<p><code><strong>T: Threat</strong></code><br><code><em>Person(s) with Intent, Opportunity, and Capability</em></code></p>
<p><img src="https://notes.0x30.io/lib/exe/fetch.php?w=600&amp;tok=609fa9&amp;media=cybersec:the-cyber-kill-chain.png"></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Databases per use type</title>
        <author>
            <name>Jonathan Gonzalez</name>
        </author>
        <link href="https://0x30.io/databases-per-use-type/"/>
        <id>https://0x30.io/databases-per-use-type/</id>

        <updated>2019-08-07T07:31:53+02:00</updated>
            <summary>
                <![CDATA[
                    The critical difference between NoSQL and Relational databases is that RDBMS schemas rigidly define how all data inserted into the database must be typed and composed, whereas NoSQL databases can be schema agnostic, allowing unstructured and semi-structured data to be stored and manipulated. NoSQL databases&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="level1">
<p>The critical difference between NoSQL and Relational databases is that RDBMS schemas rigidly define how all data inserted into the database must be typed and composed, whereas NoSQL databases can be schema agnostic, allowing unstructured and semi-structured data to be stored and manipulated.</p>
</div>
<h2 id="nosql" class="sectionedit2">NoSQL</h2>
<div class="level2">
<p>NoSQL databases emerged as a popular alternative to relational databases as web applications became increasingly complex.</p>
<p><strong>Advantages</strong>: Since there are so many types and varied applications of NoSQL databases, it’s hard to nail these down, but generally:</p>
<ul>
<li class="level1">
<div class="li">Schema-free data models are more flexible and easier to administer.</div>
</li>
<li class="level2">
<div class="li">NoSQL databases are generally more horizontally scalable and fault-tolerant.</div>
</li>
<li class="level2">
<div class="li">Data can easily be distributed across different nodes. To improve availability and/or partition tolerance, you can choose that data on some nodes be “eventually consistent”.</div>
</li>
</ul>
<p><strong>Disadvantages</strong>: These are also dependent on the database type. Principally:</p>
<ul>
<li class="level1">
<div class="li">NoSQL databases are generally less widely adopted and mature than RDBMS solutions, so specific expertise is often required.</div>
</li>
<li class="level2">
<div class="li">There are a range of formats and constraints specific to each database type.</div>
</li>
</ul>
<p>NoSQL/Non-relational databases can take a variety of form:</p>
</div>
<h3 id="time-series_database" class="sectionedit3">Time-Series database</h3>
<div class="level3">
<p><em>InfluxDB, AWS Timestream, Informix, Prometheus, Riak-TS, RRDTool, M3db, eXtreme</em></p>
<p>A software implementation that is optimized for handling time series data, arrays of numbers indexed by time, a datetime or a datetime range. In some fields these time series are called profiles, curves, or traces. This kind of databases allows users to create, enumerate, update and destroy various time series and organize them. The server often supports a number of basic calculations that work on a series as a whole, such as multiplying, adding, or otherwise combining various time series into a new time serie. They can also filter on arbitrary patterns such as time ranges, low value filters, high value filters, or even have the values of one series filter another</p>
</div>
<h3 id="key-value_stores" class="sectionedit4">Key-Value Stores</h3>
<div class="level3">
<p><em>Redis, AWS DynamoDB, Memcached, Aerospike, Riak-KV, Tarantool</em></p>
<p>Are extremely simple database management systems that store only key-value pairs and provide basic functionality for retrieving the value associated with a known key. The simplicity of key-value stores makes these database management systems particularly well-suited to embedded databases, where the stored data is not particularly complex and speed is of paramount importance.</p>
</div>
<h3 id="wide_column_stores" class="sectionedit5">Wide Column Stores</h3>
<div class="level3">
<p><em>Cassandra, Scylla, HBase</em></p>
<p>Are schema-agnostic systems that enable users to store data in column families or tables, a single row of which can be thought of as a record, a multi-dimensional key-value store. These solutions are designed with the goal of scaling well enough to manage petabytes of data across as many as thousands of commodity servers in a massive, distributed system.</p>
</div>
<h3 id="document_stores" class="sectionedit6">Document Stores</h3>
<div class="level3">
<p><em>MongoDB, Couchbase, CouchDB, Firebase,</em></p>
<p>Are schema-free systems that store data in the form of JSON documents. Document stores are similar to key-value or wide column stores, but the document name is the key and the contents of the document, whatever they are, are the value. In a document store, individual records do not require a uniform structure, can contain many different value types, and can be nested. This flexibility makes them particularly well-suited to manage semi-structured data across distributed systems.</p>
</div>
<h3 id="graph_databases" class="sectionedit7">Graph Databases</h3>
<div class="level3">
<p><em>Neo4J, Datastax</em></p>
<p>Represent data as a network of related nodes or objects in order to facilitate data visualizations and graph analytics. A node or object in a graph database contains free-form data that is connected by relationships and grouped according to labels. Graph-Oriented Database Management Systems (DBMS) software is designed with an emphasis on illustrating connections between data points. As a result, graph databases are typically used when analysis of the relationships between heterogeneous data points is the end goal of the system, such as in fraud prevention, advanced enterprise operations, or Facebook’s original friends graph.</p>
</div>
<h2 id="sql_rdbms_relational" class="sectionedit8">SQL / RDBMS / Relational</h2>
<div class="level2">
<p><em>MySQL, MariaDB, PostgreSQL, SQLite, Oracle, MS SQL Server, IBM DB2</em></p>
<p>Relational databases emerged in the 70’s to store data according to a schema that allows data to be displayed as tables with rows and columns. RDBMS all provide functionality for reading, creating, updating, and deleting data, typically by means of Structured Query Language (SQL) statements. The tables in a relational database have keys associated with them, which are used to identify specific columns or rows of a table and facilitate faster access to a particular table, row, or column of interest.</p>
<p>Data integrity is of particular concern in relational databases, and RDBMS use a number of constraints to ensure that the data contained in the tables is reliable and accurate.</p>
<p><strong>Advantages</strong>:</p>
<ul>
<li class="level1">
<div class="li">Relational databases are well-documented and mature technologies, and RDBMS are sold and maintained by a number of established corporations.</div>
</li>
<li class="level2">
<div class="li">SQL standards are well-defined and commonly accepted.</div>
</li>
<li class="level2">
<div class="li">A large pool of qualified developers have experience with SQL and RDBMS.</div>
</li>
<li class="level2">
<div class="li">All RDBMS are ACID-compliant, meaning they satisfy the requirements of Atomicity, Consistency, Isolation, and Durability.</div>
</li>
</ul>
<p><strong>Disadvantages</strong>:</p>
<ul>
<li class="level1">
<div class="li">RDBMS don’t work well (or at all) with unstructured or semi-structured data, due to schema and type constraints. This makes them ill-suited for large analytics or IoT event loads.</div>
</li>
<li class="level2">
<div class="li">The tables in your relational database will not necessarily map one-to-one with an object or class representing the same data.</div>
</li>
<li class="level2">
<div class="li">When migrating one RDBMS to another, schemas and types must generally be identical between source and destination tables for migration to work (schema constraint). For many of the same reasons, extremely complex datasets or those containing variable-length records are generally difficult to handle with an RDBMS schema.</div>
</li>
</ul>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Security KPIs</title>
        <author>
            <name>Jonathan Gonzalez</name>
        </author>
        <link href="https://0x30.io/security-kpis/"/>
        <id>https://0x30.io/security-kpis/</id>

        <updated>2019-08-07T07:30:35+02:00</updated>
            <summary>
                <![CDATA[
                    Building meaningful KPIs isn't an easy task. My experience with several Enterprise IT and security methodologies and frameworks is that, due to the fact the a) organisations are mostly immature in regard to security, and b) organisations want to have a security framework in place they can trust because&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <div class="level1">
<p>Building meaningful KPIs isn't an easy task.</p>
<p>My experience with several Enterprise IT and security methodologies and frameworks is that, due to the fact the <em>a)</em> organisations are mostly immature in regard to security, and <em>b)</em> organisations want to have a security framework in place they can trust because they don't understand the full risk picture, involvement with fat frameworks, highly theoretical and difficult to develop in the practice, are very common specially if you think that no enough headcount is normally assigned to the security practice. With that in mind, we can/must simplify the security controls by revising the most necessary indicators, getting rid of those others that only mature organisations, from security angle, are ready to deliver.</p>
<p>On the other hand, the framework or methodology to follow must be the most simplistic posible in order to streamline the control task, avoiding as much as posible the burden of the bureaucracy typically implemented on immature organisations as a result of false security sensation when, in fact, they are simply less developed organisations trying to overcome an difficult IT practice to control risks.</p>
</div>
<h2 id="control_objectives" class="sectionedit2">Control objectives</h2>
<div class="level2">
<ol>
<li class="level1">
<div class="li">Cloud strategy</div>
</li>
<li class="level1">
<div class="li">Stakeholder communication plan</div>
</li>
<li class="level1">
<div class="li">Security cartography</div>
</li>
<li class="level1">
<div class="li">Documented shared responsibility model + RACI</div>
</li>
<li class="level1">
<div class="li">Security Operations playbook + Run-books + RACI</div>
</li>
<li class="level1">
<div class="li">Security epics plan / Director plan</div>
</li>
<li class="level1">
<div class="li">Incident response simulation</div>
</li>
</ol>
</div>
<h2 id="measurement" class="sectionedit3">Measurement</h2>
<h3 id="typology" class="sectionedit4">Typology</h3>
<div class="level3">
<ul>
<li class="level1">
<div class="li">[U] –&gt; Unaddressed</div>
</li>
<li class="level1">
<div class="li">[E] –&gt; Engaged</div>
</li>
<li class="level1">
<div class="li">[C] –&gt; Completed</div>
</li>
</ul>
</div>
<h3 id="values" class="sectionedit5">Values</h3>
<div class="level3">
<ul>
<li class="level1">
<div class="li">[U] –&gt; 0 or 'Not addressed'</div>
</li>
<li class="level1">
<div class="li">[E] –&gt; 1 or 'Addressed in architecture and plans'</div>
</li>
<li class="level1">
<div class="li">[E] –&gt; 2 or 'Minimal viable implementation'</div>
</li>
<li class="level1">
<div class="li">[C] –&gt; 4 or 'Enterprise-ready production implementation'</div>
</li>
</ul>
</div>
            ]]>
        </content>
    </entry>
</feed>
